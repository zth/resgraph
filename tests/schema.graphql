type Query {
  allUsers(after: String, before: String, first: Int, last: Int): UserConnection
  allowExplicitNull(someNullable: String): String!
  currentTime: TimestampHidden
  currentTimeFlat: Timestamp!
  customScalar: TimestampZ
  customScalarImplSerializable: TimestampHiddenSerializable
  entity(id: ID!): UserOrGroup!
  hasName(id: ID!): HasName
  listAsArgs(list1: [String], list2: [[String]], list3: [[[String!]!]], nullableInnerList: [String], nullableList: [String], optionalList: [String!], regularList: [String]!): [String!]!
  me: User

  """Fetches an object given its ID."""
  node(id: ID!): Node

  """Fetches objects given their IDs."""
  nodes(ids: [ID!]!): [Node]!
  pet: Pet
  searchForUser(input: UserConfig!): User
}

type UserConnection {
  """A list of edges."""
  edges: [UserEdge]

  """Information to aid in pagination."""
  pageInfo: User!

  """The total count of edges in the connection right now."""
  totalCount: Int
}

type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User
}

"""A user in the system."""
type User implements HasName & Node {
  abbreviatedName: String

  """The age of the user."""
  age: Int!
  allNames: [String!]!
  currentStatus: UserStatus!

  """The id of the object."""
  id: ID!

  """The last age of the user."""
  lastAge: Int @deprecated(reason: "Use 'age' instead.")
  name: String!
}

"""An entity with a name."""
interface HasName {
  abbreviatedName: String
  name: String!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Indicates what status a user currently has."""
enum UserStatus {
  """User is online."""
  ONLINE

  """User is offline."""
  Offline

  """User is idle."""
  Idle @deprecated(reason: "Use 'Offline' instead. This should be \"escaped\".")
}

"""A timestamp, but with the implementation hidden in the server."""
scalar TimestampHidden

"""A timestamp. "Testing quotes here"."""
scalar Timestamp

scalar TimestampZ

"""
A timestamp, but with the implementation hidden in the server. Under the
    hood, it's serializable.
"""
scalar TimestampHiddenSerializable

"""A user or a group."""
union UserOrGroup = Group | User

"""A group in the system."""
type Group implements HasName & Node {
  abbreviatedName: String

  """The timestamp when this group was created."""
  createdAt: Timestamp

  """The id of the object."""
  id: ID!

  """When this group was last modified."""
  modifiedAt: TimestampHidden
  name: String!
}

type Pet implements HasName {
  abbreviatedName: String
  age: Int!
  name: String!
}

"""Configuration for searching for a user."""
input UserConfig {
  context: UserConfigContext

  """The ID of a user to search for."""
  id: String!

  """The name of the user to search for."""
  name: String @deprecated(reason: "This is going away")
}

"""Additional for searching for a user."""
input UserConfigContext {
  groupId: String
  name: String
}

type Mutation {
  addUser(name: String!): User
}
