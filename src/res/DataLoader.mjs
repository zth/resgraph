// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Lazy from "rescript/lib/es6/lazy.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import Dataloader from "dataloader";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CamlinternalLazy from "rescript/lib/es6/camlinternalLazy.js";
import * as StableStringifyMjs from "./stableStringify.mjs";

var Plain = {};

function stableStringifyValue(prim) {
  return StableStringifyMjs.stableStringify(prim);
}

function mapOptions(options) {
  var baseOpts_cacheKeyFn = stableStringifyValue;
  var baseOpts = {
    cacheKeyFn: baseOpts_cacheKeyFn
  };
  if (options === undefined) {
    return baseOpts;
  }
  var newrecord = Caml_obj.obj_dup(baseOpts);
  return newrecord.name = options.name, newrecord.batchScheduleFn = options.batchScheduleFn, newrecord;
}

function makeSingle(loadFn, options) {
  return Lazy.from_fun(function () {
              return new Dataloader((function (keys) {
                            return Promise.all(keys.map(loadFn));
                          }), Caml_option.option_get(mapOptions(options)));
            });
}

function makeBatched(loadFn, options) {
  return Lazy.from_fun(function () {
              return new Dataloader(loadFn, Caml_option.option_get(mapOptions(options)));
            });
}

function load(lazyLoader, key) {
  var loader = CamlinternalLazy.force(lazyLoader);
  return loader.load(key);
}

function loadMany(lazyLoader, keys) {
  var loader = CamlinternalLazy.force(lazyLoader);
  return loader.loadMany(keys);
}

function clear(lazyLoader, key) {
  var loader = CamlinternalLazy.force(lazyLoader);
  loader.clear(key);
}

function clearAll(lazyLoader) {
  var loader = CamlinternalLazy.force(lazyLoader);
  loader.clearAll();
}

function prime(lazyLoader, value) {
  var loader = CamlinternalLazy.force(lazyLoader);
  loader.prime(value);
}

function primeWithPromise(lazyLoader, value) {
  var loader = CamlinternalLazy.force(lazyLoader);
  loader.prime(value);
}

function name(lazyLoader) {
  var loader = CamlinternalLazy.force(lazyLoader);
  return Caml_option.nullable_to_opt(loader.name);
}

export {
  Plain ,
  makeSingle ,
  makeBatched ,
  load ,
  loadMany ,
  clear ,
  clearAll ,
  prime ,
  primeWithPromise ,
  name ,
}
/* dataloader Not a pure module */
