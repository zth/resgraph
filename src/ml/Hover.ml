open SharedTypes
open GenerateSchemaTypes

let banner typ = Printf.sprintf "GraphQL %s generated by ResGraph:\n" typ

let newHover ~full locItem =
  let {file; package} = full in
  let env = QueryEnv.fromFile file in
  let schemaState =
    Lazy.from_fun (fun () -> GenerateSchemaUtils.readStateFile ~package |> fst)
  in

  match locItem.locType with
  | TypeDefinition (name, decl, stamp) -> (
    let schemaState = Lazy.force schemaState in
    match
      GenerateSchemaUtils.extractGqlAttribute ~schemaState
        ~env:(QueryEnv.fromFile file) decl.type_attributes
    with
    | Some InputObject -> (
      match Hashtbl.find_opt schemaState.inputObjects name with
      | None -> None
      | Some input ->
        Some
          (banner "input object"
          ^ Markdown.graphqlCodeBlock (GenerateSchemaSDL.printInputObject input)
          ))
    | Some ObjectType -> (
      match Hashtbl.find_opt schemaState.types name with
      | None -> None
      | Some typ ->
        Some
          (banner "type"
          ^ Markdown.graphqlCodeBlock (GenerateSchemaSDL.printObjectType typ)))
    | Some Enum -> (
      match Hashtbl.find_opt schemaState.enums name with
      | None -> None
      | Some enum ->
        Some
          (banner "enum"
          ^ Markdown.graphqlCodeBlock (GenerateSchemaSDL.printEnum enum)))
    | Some Union -> (
      match Hashtbl.find_opt schemaState.unions name with
      | None -> None
      | Some union ->
        Some
          (banner "union"
          ^ Markdown.graphqlCodeBlock (GenerateSchemaSDL.printUnion union)))
    | Some Scalar when name = "t" -> (
      (* module Timestamp = { @gql.scalar type = float } *)
      (* The module name is the scalar name here. *)
      match Stamps.findType file.stamps stamp with
      | None -> None
      | Some declared -> (
        let moduleName =
          GenerateSchemaUtils.lastModuleInPath declared.modulePath
        in
        match Hashtbl.find_opt schemaState.scalars moduleName with
        | None -> None
        | Some scalar ->
          Some
            (banner "scalar"
            ^ Markdown.graphqlCodeBlock (GenerateSchemaSDL.printScalar scalar)))
      )
    | Some Scalar -> (
      match Hashtbl.find_opt schemaState.scalars name with
      | None -> None
      | Some scalar ->
        Some
          (banner "scalar"
          ^ Markdown.graphqlCodeBlock (GenerateSchemaSDL.printScalar scalar)))
    | Some Interface -> (
      match Hashtbl.find_opt schemaState.interfaces name with
      | None -> None
      | Some intf ->
        Some
          (banner "interface"
          ^ Markdown.graphqlCodeBlock (GenerateSchemaSDL.printInterface intf)))
    | Some (InterfaceResolver _) | Some Field | None -> None)
  | Typed (_, _t, locKind) -> (
    match References.definedForLoc2 ~file ~package locKind with
    | None -> None
    | Some d -> (
      match Stamps.findValue file.stamps d.stamp with
      | None -> None
      | Some declared -> (
        let schemaState = Lazy.force schemaState in
        match
          GenerateSchema.extractResolverFunctionInfo ~resolverName:d.name.txt
            ~full ~env ~schemaState ~debug:false declared.item
        with
        | Some (GraphQLObjectType {id}, _, _) -> (
          let objectType = Hashtbl.find schemaState.types id in
          match
            objectType.fields
            |> List.find_opt (fun (f : gqlField) -> f.name = declared.name.txt)
          with
          | None -> None
          | Some f ->
            Some
              (banner "object type field"
              ^ Markdown.graphqlCodeBlock
                  (Printf.sprintf "type %s {\n%s\n}" objectType.displayName
                     (GenerateSchemaSDL.printFields [f]))))
        | Some (GraphQLInterface {id}, _, _) -> (
          let intf = Hashtbl.find schemaState.interfaces id in
          match
            intf.fields
            |> List.find_opt (fun (f : gqlField) -> f.name = declared.name.txt)
          with
          | None -> None
          | Some f ->
            Some
              (banner "interface field"
              ^ Markdown.graphqlCodeBlock
                  (Printf.sprintf "interface %s {\n%s\n}" intf.displayName
                     (GenerateSchemaSDL.printFields [f]))))
        | _ -> None)))
  | _ -> None

let hover ~path ~pos ~debug =
  let result =
    match Cmt.loadFullCmtFromPath ~path with
    | None -> Protocol.null
    | Some full -> (
      match References.getLocItem ~full ~pos ~debug with
      | None ->
        if debug then Printf.printf "Nothing at that position.\n";
        Protocol.null
      | Some locItem -> (
        let hoverText = newHover ~full locItem in
        match hoverText with
        | None -> Protocol.null
        | Some s -> Protocol.stringifyHover s))
  in
  Printf.printf "{\"status\": \"Hover\", \"item\": %s}" result