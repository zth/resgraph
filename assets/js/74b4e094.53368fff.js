"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[252],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(t),y=a,g=c["".concat(p,".").concat(y)]||c[y]||d[y]||o;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=y;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7918:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:4},i="Unions",s={unversionedId:"unions",id:"unions",title:"Unions",description:"You define a union by defining a variant with payloads of types tagged with @gql.type, and annotate that variant with @gql.union:",source:"@site/docs/unions.md",sourceDirName:".",slug:"/unions",permalink:"/resgraph/docs/unions",draft:!1,editUrl:"https://github.com/zth/resgraph/tree/main/docs/templates/shared/docs/unions.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Enums",permalink:"/resgraph/docs/enums"},next:{title:"Interfaces",permalink:"/resgraph/docs/interfaces"}},p={},l=[{value:"Using unions in the schema",id:"using-unions-in-the-schema",level:2}],u={toc:l},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unions"},"Unions"),(0,a.kt)("p",null,"You define a union by defining a variant with payloads of types tagged with ",(0,a.kt)("inlineCode",{parentName:"p"},"@gql.type"),", and annotate that variant with ",(0,a.kt)("inlineCode",{parentName:"p"},"@gql.union"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rescript"},"@gql.type\ntype user = {\n  @gql.field name: string,\n  @gql.field age: int\n}\n\n@gql.type\ntype group = {\n  @gql.field displayName: string,\n}\n\n@gql.union\ntype entity = User(user) | Group(group)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"type User {\n  name: String!\n  age: Int!\n}\n\ntype Group {\n  displayName: String!\n}\n\nunion Entity = User | Group\n")),(0,a.kt)("p",null,"Each variant case can be called whatever you want it to (although it's good practice to follow the name of the GraphQL type it holds), but rememeber that the payload of each union variant case must be exactly 1 type that has a ",(0,a.kt)("inlineCode",{parentName:"p"},"@gql.type")," annotation. But don't worry, ResGraph will complain if you try anything else."),(0,a.kt)("p",null,"You can add comments on the union type definition itself, as well as each variant case, and they'll end up in the schema."),(0,a.kt)("h2",{id:"using-unions-in-the-schema"},"Using unions in the schema"),(0,a.kt)("p",null,"Unions can be used as the type for fields on GraphQL objects or interfaces. A simple example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rescript"},"@gql.type\ntype user = {\n  @gql.field name: string,\n  @gql.field age: int\n}\n\n@gql.type\ntype group = {\n  @gql.field displayName: string,\n}\n\n@gql.union\ntype entity = User(user) | Group(group)\n\n@gql.field\nlet entity = async (_: query, ~entityId, ~ctx: ResGraphContext.context): option<entity> => {\n  switch decodeEntityId(entityId) {\n  | Some(#User, id) =>\n    switch await ctx.dataLoaders.userById(~userId=id) {\n    | None => None\n    | Some(user) => Some(User(user))\n    }\n  | Some(#Group, id) =>\n    switch await ctx.dataLoaders.groupById(~groupId=id) {\n    | None => None\n    | Some(group) => Some(Group(group))\n    }\n  | _ => None\n  }\n}\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"type User {\n  name: String!\n  age: Int!\n}\n\ntype Group {\n  displayName: String!\n}\n\nunion Entity = User | Group\n\ntype Query {\n  entity(entityId: String!): Entity\n}\n")),(0,a.kt)("p",null,"Now that we've covered unions, we can move on to ",(0,a.kt)("a",{parentName:"p",href:"interfaces"},"interfaces"),"."))}d.isMDXComponent=!0}}]);