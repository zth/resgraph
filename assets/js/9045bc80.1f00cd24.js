"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[515],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),o=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=o(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=o(t),h=r,g=c["".concat(p,".").concat(h)]||c[h]||f[h]||i;return t?a.createElement(g,l(l({ref:n},m),{},{components:t})):a.createElement(g,l({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=h;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=t[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},459:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:5},l="Interfaces",s={unversionedId:"interfaces",id:"interfaces",title:"Interfaces",description:"Interfaces are defined by tagging a record with @gql.interface:",source:"@site/docs/interfaces.md",sourceDirName:".",slug:"/interfaces",permalink:"/resgraph/docs/interfaces",draft:!1,editUrl:"https://github.com/zth/resgraph/tree/main/docs/templates/shared/docs/interfaces.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Unions",permalink:"/resgraph/docs/unions"},next:{title:"Custom Scalars",permalink:"/resgraph/docs/custom-scalars"}},p={},o=[{value:"Implementing an interface",id:"implementing-an-interface",level:2},{value:"Exposing fields from the interface",id:"exposing-fields-from-the-interface",level:2},{value:"Overriding interface fields per type",id:"overriding-interface-fields-per-type",level:3},{value:"Interfaces as return types",id:"interfaces-as-return-types",level:2},{value:"Extras",id:"extras",level:3}],m={toc:o},c="wrapper";function f(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interfaces"},"Interfaces"),(0,r.kt)("p",null,"Interfaces are defined by tagging a record with ",(0,r.kt)("inlineCode",{parentName:"p"},"@gql.interface"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"/** An entity with a name. */\n@gql.interface\ntype hasName = {\n  /** The name of the thing. */\n  @gql.field name: string\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'"""\nAn entity with a name.\n"""\ninterface HasName {\n  """\n  The name of the thing.\n  """\n  name: String!\n}\n')),(0,r.kt)("h2",{id:"implementing-an-interface"},"Implementing an interface"),(0,r.kt)("p",null,"You implement an interface on a type (or other interface) by spreading that interface on that type definition. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"/** An entity with a name. */\n@gql.interface\ntype hasName = {\n  /** The name of the thing. */\n  @gql.field name: string\n}\n\n/** A user in the system. */\n@gql.type\ntype user = {\n  ...hasName,\n  @gql.field age: int\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'"""\nAn entity with a name.\n"""\ninterface HasName {\n  """\n  The name of the thing.\n  """\n  name: String!\n}\n\ntype User implements HasName {\n  """\n  The name of the thing.\n  """\n  name: String!\n\n  age: Int!\n}\n')),(0,r.kt)("h2",{id:"exposing-fields-from-the-interface"},"Exposing fields from the interface"),(0,r.kt)("p",null,"Just like with ",(0,r.kt)("a",{parentName:"p",href:"object-types#fields"},"fields on object types"),", you can expose fields on interfaces either directly via ",(0,r.kt)("inlineCode",{parentName:"p"},"@gql.field"),", or by defining a function with ",(0,r.kt)("inlineCode",{parentName:"p"},"@gql.field"),"."),(0,r.kt)("p",null,"When defining a function you add the interface type as the first unlabelled argument so ResGraph understands this field is for the interface. Each type implementing that interface will then get a copy of that field added to it automatically. An example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"/** An entity with a name. */\n@gql.interface\ntype hasName = {\n  /** The name of the thing. */\n  @gql.field name: string\n}\n\n/** A user in the system. */\n@gql.type\ntype user = {\n  ...hasName,\n  @gql.field age: int\n}\n\n/** The initials.*/\n@gql.field\nlet initials = (hasName: hasName) => {\n  Some(initialsFromName(hasName.name))\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'"""\nAn entity with a name.\n"""\ninterface HasName {\n  """\n  The name of the thing.\n  """\n  name: String!\n\n  """\n  The initials.\n  """\n  initials: String\n}\n\ntype User implements HasName {\n  """\n  The name of the thing.\n  """\n  name: String!\n\n  age: Int!\n\n  """\n  The initials.\n  """\n  initials: String\n}\n')),(0,r.kt)("h3",{id:"overriding-interface-fields-per-type"},"Overriding interface fields per type"),(0,r.kt)("p",null,"Sometimes you might want to override that interface field resolver per type. Just define a new field function for that particular type, and it'll take precedence over the generic interface field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"/** An entity with a name. */\n@gql.interface\ntype hasName = {\n  /** The name of the thing. */\n  @gql.field name: string\n}\n\n/** A user in the system. */\n@gql.type\ntype user = {\n  ...hasName,\n  @gql.field age: int\n}\n\n/** The initials.*/\n@gql.field\nlet initials = (hasName: hasName) => {\n  Some(initialsFromName(hasName.name))\n}\n\n// In another file UserResolvers.res\n/** The user's initials.*/\n@gql.field\nlet initials = (user: user) => {\n  Some(initialsFromUser(user))\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'"""\nAn entity with a name.\n"""\ninterface HasName {\n  """\n  The name of the thing.\n  """\n  name: String!\n\n  """\n  The initials.\n  """\n  initials: String\n}\n\ntype User implements HasName {\n  """\n  The name of the thing.\n  """\n  name: String!\n\n  age: Int!\n\n  """\n  The user\'s initials.\n  """\n  initials: String\n}\n')),(0,r.kt)("h2",{id:"interfaces-as-return-types"},"Interfaces as return types"),(0,r.kt)("p",null,"You can use interfaces as return types as well in your schema. In order to use an interface as a return type, leverage the autogenerated ",(0,r.kt)("inlineCode",{parentName:"p"},"resolver")," type for that interface from ",(0,r.kt)("inlineCode",{parentName:"p"},"ResGraphSchemaAssets.res"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"let thingWithName = async (_: query, ~thingId, ~ctx: ResGraphContext.context): option<ResGraphSchemaAssets.hasName_resolver> => {\n  switch decodeThingId(thingId) {\n    | Some(#User(id)) => switch await ctx.dataLoaders.userById.load(~userId=id) {\n      | None => None\n      | Some(user) => Some(User(user))\n    }\n    | _ => None\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"interface HasName {\n  name: String!\n}\n\ntype User implements HasName {\n  name: String!\n}\n\ntype Query {\n  thingWithName(thingId: String!): HasName\n}\n")),(0,r.kt)("p",null,"A few things to note:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each interface will have its own ",(0,r.kt)("inlineCode",{parentName:"li"},"ResGraphSchemaAssets.<interface-name>_resolver")," generated."),(0,r.kt)("li",{parentName:"ul"},"This type will help you return ",(0,r.kt)("em",{parentName:"li"},"any")," of the types that implement that interface."),(0,r.kt)("li",{parentName:"ul"},"Because the generated type will link to GraphQL types in your application code, it's good practice to put these resolvers in their own files.")),(0,r.kt)("h3",{id:"extras"},"Extras"),(0,r.kt)("p",null,"It's often useful to know on the server what types actually implement an interface. ResGraph will automatically generate 2 helpful things in ",(0,r.kt)("inlineCode",{parentName:"p"},"ResGraphSchemaAssets")," to keep track of this:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"type <interface-name>_implementedBy = <all names of types implementing the interface>"),"."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"let <interface-name>_typenameToString: <interface-name>_implementedBy => string"),".")),(0,r.kt)("p",null,"A full example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"@gql.interface\ntype hasName = {\n  @gql.field name: string\n}\n\n@gql.type\ntype user = {\n  ...hasName\n}\n\n@gql.type\ntype group = {\n  ...hasName\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"interface HasName {\n  name: String!\n}\n\ntype User {\n  name: String!\n}\n\ntype Group {\n  name: String!\n}\n")),(0,r.kt)("p",null,"Notice both ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Group")," implements ",(0,r.kt)("inlineCode",{parentName:"p"},"HasName"),". This generates the following helpers in ",(0,r.kt)("inlineCode",{parentName:"p"},"ResGraphSchemaAssets.res"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"type hasName_implementedBy = User | Group\nlet hasName_typenameToString: hasName_implementedBy => string\n")),(0,r.kt)("p",null,"There, we've covered interfaces. Let's talk about ",(0,r.kt)("a",{parentName:"p",href:"custom-scalars"},"custom scalars"),"!"))}f.isMDXComponent=!0}}]);