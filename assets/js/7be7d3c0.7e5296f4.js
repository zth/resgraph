"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[578],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1007:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:8},i="Mutations",p={unversionedId:"mutation",id:"mutation",title:"Mutations",description:"If your GraphQL API has mutations, you'll need to define a mutation type:",source:"@site/docs/mutation.md",sourceDirName:".",slug:"/mutation",permalink:"/resgraph/docs/mutation",draft:!1,editUrl:"https://github.com/zth/resgraph/tree/main/docs/templates/shared/docs/mutation.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Query",permalink:"/resgraph/docs/query"},next:{title:"Subscriptions",permalink:"/resgraph/docs/subscriptions"}},s={},u=[{value:"Adding fields to <code>Mutation</code>",id:"adding-fields-to-mutation",level:2}],l={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mutations"},"Mutations"),(0,a.kt)("p",null,"If your GraphQL API has mutations, you'll need to define a ",(0,a.kt)("inlineCode",{parentName:"p"},"mutation")," type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rescript"},"@gql.type\ntype mutation\n")),(0,a.kt)("p",null,"Notice that ",(0,a.kt)("inlineCode",{parentName:"p"},"mutation")," is also an ",(0,a.kt)("em",{parentName:"p"},"abstract type"),", just like ",(0,a.kt)("a",{parentName:"p",href:"query"},(0,a.kt)("inlineCode",{parentName:"a"},"query")),"."),(0,a.kt)("h2",{id:"adding-fields-to-mutation"},"Adding fields to ",(0,a.kt)("inlineCode",{parentName:"h2"},"Mutation")),(0,a.kt)("p",null,"Fields are added to ",(0,a.kt)("inlineCode",{parentName:"p"},"Mutation")," just like you'd ",(0,a.kt)("a",{parentName:"p",href:"object-types#adding-fields-to-types-via-functions"},"add fields to any other type"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rescript"},"@gql.field\nlet setNewName = (_: mutation, ~newName, ~userId, ~ctx: ResGraphContext.context) => {\n  // Returns promise<option<user>>\n  ctx.mutations.setNewUserName(~userId=userId->ResGraph.idToString, ~name=newName)\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"type Mutation {\n  setNewName(newName: String!, userId: ID!): User\n}\n")),(0,a.kt)("p",null,"Notice ",(0,a.kt)("inlineCode",{parentName:"p"},"_: mutation"),". ResGraph needs to know that it's ",(0,a.kt)("inlineCode",{parentName:"p"},"Mutation")," you want to attach this field to, but since there's nothing you can actually do with your abstract ",(0,a.kt)("inlineCode",{parentName:"p"},"mutation")," type, it's good practice to name it ",(0,a.kt)("inlineCode",{parentName:"p"},"_"),"."),(0,a.kt)("p",null,"A good next read is ",(0,a.kt)("a",{parentName:"p",href:"object-types"},"how to define object types"),"."))}d.isMDXComponent=!0}}]);