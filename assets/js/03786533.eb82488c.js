"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[695],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>f});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=t.createContext({}),l=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=l(e.components);return t.createElement(u.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(r),h=o,f=c["".concat(u,".").concat(h)]||c[h]||d[h]||i;return r?t.createElement(f,a(a({ref:n},p),{},{components:r})):t.createElement(f,a({ref:n},p))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=h;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}h.displayName="MDXCreateElement"},1188:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var t=r(7462),o=(r(7294),r(3905));const i={sidebar_position:8},a="Input Unions",s={unversionedId:"input-unions",id:"input-unions",title:"Input Unions",description:"Even though they're not officially in the spec yet, ResGraph has first class support for input unions via the @oneOf server directive proposal.",source:"@site/docs/input-unions.md",sourceDirName:".",slug:"/input-unions",permalink:"/resgraph/docs/input-unions",draft:!1,editUrl:"https://github.com/zth/resgraph/tree/main/docs/templates/shared/docs/input-unions.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Query",permalink:"/resgraph/docs/query"},next:{title:"Mutations",permalink:"/resgraph/docs/mutation"}},u={},l=[{value:"Comments",id:"comments",level:3},{value:"Handling <code>null</code>",id:"handling-null",level:3},{value:"Recursive input unions",id:"recursive-input-unions",level:3}],p={toc:l},c="wrapper";function d(e){let{components:n,...r}=e;return(0,o.kt)(c,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"input-unions"},"Input Unions"),(0,o.kt)("p",null,"Even though they're not officially in the spec yet, ResGraph has first class support for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphql/graphql-spec/pull/825"},"input unions via the ",(0,o.kt)("inlineCode",{parentName:"a"},"@oneOf")," server directive proposal"),"."),(0,o.kt)("p",null,"Input unions are unions that can be used as inputs for fields and mutations. Input unions are regular variants in ResGraph, where the payload can be:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Any valid GraphQL type that can be used in an input position"),(0,o.kt)("li",{parentName:"ul"},"An inline record")),(0,o.kt)("p",null,"Using an inline record will produce a new input object type for only this inline record."),(0,o.kt)("p",null,"Input unions are defined by using a variant annotated with ",(0,o.kt)("inlineCode",{parentName:"p"},"@gql.inputUnion"),". Full example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"/** Searching for a user by group. */\n@gql.inputObject\ntype userSearchByGroupConfig = {\n  groupId: ResGraph.id,\n  userMemberToken?: string,\n}\n\n/** Config for searching for a user. */\n@gql.inputUnion\ntype userSearchConfig = ByGroup(userSearchByGroupConfig) | ByName(string) | ByUserToken({userToken: ResGraph.id})\n\n@gql.field\nlet searchForUser = (_: query, ~input: userSearchConfig, ~ctx: ResGraphContext.context): option<user> => {\n  switch input {\n  | ByGroup({groupId, userMemberToken}) => ctx.dataLoaders.searchForUserByGroup.load(~userMemberToken, ~groupId)\n  | ByName({groupId, userMemberToken}) => ctx.dataLoaders.searchForUserByName.load(name)\n  | ByUserToken({userToken}) => ctx.dataLoaders.searchForUserByToken.load(userToken)\n  }\n\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'"""\nSearching for a user by group.\n"""\ninput UserSearchByGroupConfig {\n  groupId: ID!\n  userMemberToken: String\n}\n\ninput UserSearchConfigByUserToken {\n  userToken: ID!\n}\n\n"""\nConfig for searching for a user.\n"""\ninput UserSearchConfig @oneOf {\n  byGroup: UserSearchByGroupConfig\n  byName: String\n  byUserToken: UserSearchConfigByUserToken\n}\n\ntype Query {\n  searchForUser(input: UserSearchConfig!): User\n}\n')),(0,o.kt)("p",null,"As with regular input objects, all fields are automatically exposed."),(0,o.kt)("h3",{id:"comments"},"Comments"),(0,o.kt)("p",null,"You can add comments to the type definition itself, and to all record fields. These will then be exposed in your schema."),(0,o.kt)("h3",{id:"handling-null"},"Handling ",(0,o.kt)("inlineCode",{parentName:"h3"},"null")),(0,o.kt)("p",null,"Just like in ",(0,o.kt)("a",{parentName:"p",href:"object-types#handling-null-in-arguments"},"arguments of object type fields"),", you can choose to explicitly handle ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," values by annotating any field or member in the input union to be ",(0,o.kt)("inlineCode",{parentName:"p"},"Js.Nullable.t"),"."),(0,o.kt)("h3",{id:"recursive-input-unions"},"Recursive input unions"),(0,o.kt)("p",null,"As with input objects, input unions are allowed to be (mutually) recursive, if they're not recursive in a non-nullable way, as that would create an endless loop."),(0,o.kt)("p",null,"Read more ",(0,o.kt)("a",{parentName:"p",href:"input-objects"},"in the input object docs"),"."))}d.isMDXComponent=!0}}]);