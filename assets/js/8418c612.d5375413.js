"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[854],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=l(r),y=o,m=c["".concat(u,".").concat(y)]||c[y]||d[y]||a;return r?n.createElement(m,i(i({ref:t},s),{},{components:r})):n.createElement(m,i({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=y;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p[c]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},4340:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:7},i="Query",p={unversionedId:"query",id:"query",title:"Query",description:"The heart of your GraphQL server is the Query type. The first thing you'll do setting up your GraphQL server is to define your query type:",source:"@site/docs/query.md",sourceDirName:".",slug:"/query",permalink:"/resgraph/docs/query",draft:!1,editUrl:"https://github.com/zth/resgraph/tree/main/docs/templates/shared/docs/query.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Input Objects",permalink:"/resgraph/docs/input-objects"},next:{title:"Input Unions",permalink:"/resgraph/docs/input-unions"}},u={},l=[{value:"Adding fields to <code>Query</code>",id:"adding-fields-to-query",level:2}],s={toc:l},c="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"query"},"Query"),(0,o.kt)("p",null,"The heart of your GraphQL server is the ",(0,o.kt)("inlineCode",{parentName:"p"},"Query")," type. The first thing you'll do setting up your GraphQL server is to define your query type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"@gql.type\ntype query\n")),(0,o.kt)("p",null,"Notice that ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," is an ",(0,o.kt)("em",{parentName:"p"},"abstract type"),". In some flavors of GraphQL, ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," is allowed to have a root value, just like regular types also can. However, in ResGraph, we've opted to reduce complexity by allowing neither ",(0,o.kt)("inlineCode",{parentName:"p"},"Query")," nor ",(0,o.kt)("inlineCode",{parentName:"p"},"Mutation")," to have root values."),(0,o.kt)("p",null,"Instead you're encouraged to put whatever you'd put in the root value for ",(0,o.kt)("inlineCode",{parentName:"p"},"Query")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Mutation")," into your ",(0,o.kt)("inlineCode",{parentName:"p"},"ResGraphContext.context"),"."),(0,o.kt)("h2",{id:"adding-fields-to-query"},"Adding fields to ",(0,o.kt)("inlineCode",{parentName:"h2"},"Query")),(0,o.kt)("p",null,"Fields are added to ",(0,o.kt)("inlineCode",{parentName:"p"},"Query")," just like you'd ",(0,o.kt)("a",{parentName:"p",href:"object-types#adding-fields-to-types-via-functions"},"add fields to any other type"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"@gql.field\nlet currentTime = (_: query) => {\n  Date.now()\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  currentTime: Float!\n}\n")),(0,o.kt)("p",null,"Notice ",(0,o.kt)("inlineCode",{parentName:"p"},"_: query"),". ResGraph needs to know that it's ",(0,o.kt)("inlineCode",{parentName:"p"},"Query")," you want to attach this field to, but since there's nothing you can actually do with your abstract ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," type, it's good practice to name it ",(0,o.kt)("inlineCode",{parentName:"p"},"_"),"."),(0,o.kt)("p",null,"A good next read is ",(0,o.kt)("a",{parentName:"p",href:"object-types"},"how to define object types"),"."))}d.isMDXComponent=!0}}]);