"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[664],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},543:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:9},i="Subscriptions",s={unversionedId:"subscriptions",id:"subscriptions",title:"Subscriptions",description:"You can add a subscription to your schema by defining a subscription type and then attaching resolvers to it. All subscription resolvers must return an AsyncIterator.t with a valid GraphQL type.",source:"@site/docs/subscriptions.md",sourceDirName:".",slug:"/subscriptions",permalink:"/resgraph/docs/subscriptions",draft:!1,editUrl:"https://github.com/zth/resgraph/tree/main/docs/templates/shared/docs/subscriptions.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Mutations",permalink:"/resgraph/docs/mutation"},next:{title:"Integrating with existing GraphQL schemas",permalink:"/resgraph/docs/integrating-with-existing-graphql-schemas"}},c={},p=[],l={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"subscriptions"},"Subscriptions"),(0,o.kt)("p",null,"You can add a subscription to your schema by defining a ",(0,o.kt)("inlineCode",{parentName:"p"},"subscription")," type and then attaching resolvers to it. All subscription resolvers ",(0,o.kt)("em",{parentName:"p"},"must return an ",(0,o.kt)("a",{parentName:"em",href:"https://rescript-lang.org/docs/manual/latest/api/core/asynciterator"},(0,o.kt)("inlineCode",{parentName:"a"},"AsyncIterator.t")))," with a valid GraphQL type."),(0,o.kt)("p",null,"Let's look at an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"// Define the subscription type\n@gql.type\ntype subscription\n\nlet wait = ms => {\n  Promise.make((resolve, _) => {\n    let _ = setTimeout(() => resolve(), ms)\n  })\n}\n\n@gql.field\nlet countdown = (_: subscription, ~from: int) => {\n  let countdown = ref(from)\n  let iterator = AsyncIterator.make(async () => {\n    await wait(500)\n    let current = countdown.contents\n    countdown := current - 1\n\n    if current > 0 {\n      AsyncIterator.value(current)\n    } else {\n      AsyncIterator.done(~finalValue=current)\n    }\n  })\n\n  iterator\n}\n\n")),(0,o.kt)("p",null,"This would produce the following schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"type Subscription {\n  countdown(from: Int!): Int!\n}\n")))}m.isMDXComponent=!0}}]);