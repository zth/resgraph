"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[340],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),l=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(o.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=l(t),d=a,f=c["".concat(o,".").concat(d)]||c[d]||m[d]||s;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=d;var u={};for(var o in n)hasOwnProperty.call(n,o)&&(u[o]=n[o]);u.originalType=e,u[c]="string"==typeof e?e:a,i[1]=u;for(var l=2;l<s;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2294:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const s={sidebar_position:3},i="Enums",u={unversionedId:"enums",id:"enums",title:"Enums",description:"Enums are defined by defining a variant without payloads and annotate it with @gql.enum:",source:"@site/docs/enums.md",sourceDirName:".",slug:"/enums",permalink:"/resgraph/docs/enums",draft:!1,editUrl:"https://github.com/zth/resgraph/tree/main/docs/templates/shared/docs/enums.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Object Types",permalink:"/resgraph/docs/object-types"},next:{title:"Unions",permalink:"/resgraph/docs/unions"}},o={},l=[{value:"Using enums in the schema",id:"using-enums-in-the-schema",level:2},{value:"Comments and deprecations",id:"comments-and-deprecations",level:2},{value:"Customizing enum case values",id:"customizing-enum-case-values",level:2}],p={toc:l},c="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"enums"},"Enums"),(0,a.kt)("p",null,"Enums are defined by defining a variant without payloads and annotate it with ",(0,a.kt)("inlineCode",{parentName:"p"},"@gql.enum"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rescript"},"@gql.enum\ntype userStatus = Online | Offline\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"enum UserStatus {\n  Online\n  Offline\n}\n")),(0,a.kt)("p",null,"Notice enums ",(0,a.kt)("em",{parentName:"p"},"must")," be variants without payloads, or ResGraph will complain."),(0,a.kt)("h2",{id:"using-enums-in-the-schema"},"Using enums in the schema"),(0,a.kt)("p",null,"Enums are valid to use anywhere in your schema where they are valid in GraphQL. ResGraph just needs to understand that it's your particular enum it's looking for. A few examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rescript"},"@gql.enum\ntype userStatus = Online | Offline\n\n@gql.type\ntype user = {\n  id: string,\n\n  @gql.field\n  currentStatus: option<userStatus>\n}\n\n@gql.field\nlet lastKnownStatus = (user: user, ~ctx: ResGraphContext.context) => {\n  // Returns promise<option<userStatus>>\n  ctx.dataLoaders.user.lastKnownStatus.load(~userId=user.id)\n}\n\n@gql.field\nlet currentUsersWithStatus = (_: query, ~status: userStatus, ~ctx: ResGraphContext.context) => {\n  // Returns promise<array<user>>\n  ctx.dataLoaders.user.byCurrentStatus.load(~status)\n}\n")),(0,a.kt)("p",null,"This above will generate the following GraphQL:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"enum UserStatus {\n  Online\n  Offline\n}\n\ntype User {\n  currentStatus: UserStatus\n  lastKnownStatus: UserStatus\n}\n\ntype Query {\n  currentUsersWithStatus: [User!]!\n}\n")),(0,a.kt)("h2",{id:"comments-and-deprecations"},"Comments and deprecations"),(0,a.kt)("p",null,"You can add comments to the enum definition, and to each enum case. You can also add deprecations to each enum case via the ",(0,a.kt)("inlineCode",{parentName:"p"},"@deprecated")," attribute. Here's a full example demonstrating all of the above:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rescript"},'/** The status of the user.*/\n@gql.enum\ntype userStatus =\n  | /** The user is online. */ Online\n  | /** The user is offline. */ Offline\n  | /** The user is idle. */ @deprecated("This is going away") Idle\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'"""\nThe status of the user.\n"""\nenum UserStatus {\n  """\n  The user is online.\n  """\n  Online\n  """\n  The user is offline.\n  """\n  Offline\n  """\n  The user is idle.\n  """\n  Idle @deprecated(reason: "This is going away")\n}\n')),(0,a.kt)("h2",{id:"customizing-enum-case-values"},"Customizing enum case values"),(0,a.kt)("p",null,"Sometimes you want to customize the value of an enum case for various reasons, in a way that might not be possible given ReScript's rules around naming variant cases. For that, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"@as")," attribute together with a string literal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rescript"},'@gql.enum\ntype userStatus =\n  |\xa0@as("ONLINE") Online\n  | @as("OFFLINE") Offline\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"enum UserStatus {\n  ONLINE\n  OFFLINE\n}\n")),(0,a.kt)("p",null,"Let's look at how enum's close friend ",(0,a.kt)("a",{parentName:"p",href:"unions"},"unions are defined")," in ResGraph."))}m.isMDXComponent=!0}}]);